# master
resource "workload-type" "kubernetes-1_28-ubuntu-22_04-digitalocean-amd64" {
  code             = "kubernetes-1.28-ubuntu-22.04-digitalocean-amd64"
  shortName        = "kubernetes-ubuntu"
  name             = "Kubernetes 1.28 Cluster on Ubuntu 22.04"
  containerVersion = "1.28.3"
  repositoryImage  = ""
  imageCode        = "morpheus kubernetes 1.28 on ubuntu 22.04"
  entryPoint       = ""
  mountLogs        = "/var/log"
  statTypeCode     = "server"
  logTypeCode      = "ubuntu"
  showServerLogs   = true
  category         = "kubernetes"
  cloneType        = "ubuntu"
  priorityOrder    = 0
  serverType       = "vm"
  providerType     = "digitalocean"
  checkTypeCode    = "vmCheck"
  virtualImage     = virtual-image.digitalocean-image-morpheus-ubuntu-22_04
  containerPorts   = ["ubuntu.22"]
  provisionType    = "digitalocean"
  scripts          = [
    "setup-disks-v1", "kubernetes-1-28-ubuntu-install-v1", "kubernetes-1-28-kubeadm-cluster-master-init-v1",
    "kubernetes-1-28-kubeadm-cluster-master-setup-v1", "kubernetes-ectd-encrypt-install-master-script-v1"
  ]
  templates = ["kubernetes-etcd-encrypt-install-master"]
}

# worker vm
resource "workload-type" "kubernetes-1_28-ubuntu-22_04-worker-digitalocean-amd64" {
  code             = "kubernetes-1.28-ubuntu-22.04-worker-digitalocean-amd64"
  shortName        = "kubernetes-worker-ubuntu"
  name             = "Kubernetes 1.28 Worker on Ubuntu 22.04"
  containerVersion = "1.28.3"
  repositoryImage  = ""
  imageCode        = "morpheus kubernetes 1.28 on ubuntu 22.04"
  entryPoint       = ""
  mountLogs        = "/var/log"
  statTypeCode     = "server"
  logTypeCode      = "ubuntu"
  showServerLogs   = true
  category         = "kubernetes"
  cloneType        = "ubuntu"
  priorityOrder    = 0
  serverType       = "vm"
  providerType     = "digitalocean"
  checkTypeCode    = "vmCheck"
  virtualImage     = virtual-image.digitalocean-image-morpheus-ubuntu-22_04
  containerPorts   = ["ubuntu.22"]
  provisionType    = "digitalocean"
  scripts          = [
    "setup-disks-v1", "kubernetes-1-28-ubuntu-install-v1", "kubernetes-1-28-kubeadm-worker-join-v1"
  ]
  templates = []
}

# master set
resource "compute-type-set" "kubernetes-1_28-ubuntu-22_04-digitalocean-amd64-set" {
  code             = "kubernetes-1.28-ubuntu-22.04-digitalocean-amd64-set"
  name             = "kubernetes master"
  workloadType      = workload-type.kubernetes-1_28-ubuntu-22_04-digitalocean-amd64
  computeServerType = compute-server-type.digitaloceanKubeMaster
  category         = "ubuntu"
  priorityOrder    = 0
  dynamicCount     = false
  nodeCount        = 1
  nameSuffix       = "-master"
  nodeType         = "master"
  installContainerRuntime = false
  installStorageRuntime = false
}

# worker set
resource "compute-type-set" "kubernetes-1_28-ubuntu-22_04-worker-digitalocean-amd64-set" {
  code             = "kubernetes-1.28-ubuntu-22.04-worker-digitalocean-amd64-set"
  name             = "kubernetes worker"
  containerType    = workload-type.kubernetes-1_28-ubuntu-22_04-worker-digitalocean-amd64
  computeServerType= "digitaloceanKubeWorker"
  category         = "ubuntu"
  priorityOrder    = 1
  dynamicCount     = true
  nodeCount        = 3
  nameSuffix       = "-worker"
  nodeType         = "worker"
  canAddNodes      = true
  installContainerRuntime = false
  installStorageRuntime = false
}

# layout
resource "compute-type-layout" "kubernetes-1_28-ubuntu-22_04-digitalocean-amd64-single" {
  code = "kubernetes-1.28-ubuntu-22.04-digitalocean-amd64-single"
  enabled = true
  name = "MKS Kubernetes 1.28 Cluster on Ubuntu 22.04"
  sortOrder = 80
  computeVersion = "22.04"
  clusterVersion = "1.28.x"
  description = "provision a kubernetes 1.28 cluster on ubuntu 22.04"
  type = "digitaloceanKubeMaster"
  serverCount = 4
  memoryRequirement = 1073741824
  hasAutoScale = true
  containerRuntime = "containerd"
  networkRuntime = "calico"
  computeServers = [
    compute-type-set.kubernetes-1_28-ubuntu-22_04-digitalocean-amd64-set,
    compute-type-set.kubernetes-1_28-ubuntu-22_04-worker-digitalocean-amd64-set
  ]
  groupType = "kubernetes-cluster"
  provisionType =  "digitalocean"
  optionTypes = [
    "kubernetes.master.podCidr",
    "kubernetes.master.serviceCidr"
  ]
  specTemplates = []
  packages = [
    "kubernetes-calico-3-26-0-package",
    "kubernetes-rook-1-13-package",
    "kubernetes-fluentbit-1-8-9-1-modified-package",
    "kubernetes-prometheus-0-9-modified-package",
    "kubernetes-nginx-ingress-operator-1-9-4-package"
  ]
}